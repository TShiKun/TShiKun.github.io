[{"content":"","permalink":"https://TShiKun.github.io/posts/blog/blog/","summary":"","title":"Blog"},{"content":"HTML5 vscode快捷键以及插件 ! +tab 默认补全 ctrl + / 注释\nh1$6补全标题\n安装open in browser插件，实时显示浏览器内容 alt+b，打开默认浏览器\n标题\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!--这是声明，文档类型的缩写，避免浏览器怪异模式--\u0026gt; \u0026lt;!-- html基本骨架 --\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;!--文档头不会显示在页面上,附加信息 --\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!-- meta单标签描述html网页文档属性，关键字等，charset是编码格式 --\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\u0026lt;!-- meta单标签 --\u0026gt; \u0026lt;title\u0026gt;MY website\u0026lt;/title\u0026gt; \u0026lt;!-- title标签有利于SEO（搜索引擎的排名需求） --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;!--文档体，页面上要参与显示的元素，都该放置在文档体中--\u0026gt; my first line; my second line; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 /* 注释 */ .hljs-comment, .hljs-quote { font-weight: 200; color: #7f848e; } .hljs-deletion, /* html标签 */ .hljs-name, .hljs-regexp, .hljs-tag { font-weight: 200; color: #e06c75; } /* html属性 */ .hljs-tag { font-weight: 200; color: #d19a66; } /* css类名 */ .hljs-template-variable, .hljs-variable, .hljs-selector-class, .hljs-selector-id { font-weight: 200; color: #a9b600; } /* 内置函数 */ .hljs-built_in, .hljs-builtin-name { font-weight: 200; color: #56b6c2; } /* 函数输入 */ .hljs-params { font-weight: 200; color: #e5c07b; } /* 数字 */ .hljs-number { font-weight: 200; color: #d19a66; } /* css属性 */ .hljs-attribute { font-weight: 200; color: #ee7c2b; } /* 字符串 */ .hljs-addition, .hljs-bullet, .hljs-symbol, .hljs-string { font-weight: 200; color: #98c379; } /* 函数名称 */ .hljs-section, .hljs-title { font-weight: 200; color: #56b6c2; } /* 关键字 */ .hljs-keyword, .hljs-selector-tag, .hljs-literal, .hljs-link, .hljs-meta, .hljs-type { font-weight: 200; color: #c678dd; } .hljs { display: block; overflow-x: auto; background: #1c1d21; color: #c0c5ce; padding: 0.5em; } .hljs-emphasis { font-style: italic; } .hljs-strong { font-weight: 700; } /* 选中时的背景颜色 */ .hljs ::selection, .hljs::selection { background-color: #3d4556; } 标签 单标签 meta\nbr 换行\nhr 分割线\nimg 图片\nimput 输入框\nlink 用于css外部样式，html文件head标签中引入\n多标签 head 头\ntitle 标题\nh1 h2 h3 h4 h5 h6 级别标题\np 段落\na 超文本链接\nem 着重\ni 斜体\nb 加粗\nstrong 加重语气\ndel 删除\nspan 无特定含义\nol + li 有序列表标签\nul + li 无序列表\ntable tr td 表格\nform + input 表单\ndiv 容器标签\nstyle 标签css写样式，单文件中一般写在head中\n标题标签 只用于标题\n根据内容重要性使用，不要随便仅仅为了生成粗体或者大号的文本而使用，主打有利与seo\nh1 - h6\n1 2 3 4 5 6 \u0026lt;h1\u0026gt;一级标题\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;二级标题\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;三级标题\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;四级标题\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;五级标题\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;六级标题\u0026lt;/h6\u0026gt; 段落标签 养成用标签承载文本的习惯\n1 2 3 \u0026lt;p\u0026gt; 这是一段话 \u0026lt;/p\u0026gt; 换行标签 \u0026lt; br \u0026gt; 或者 \u0026lt; br/ \u0026gt;\n水平线标签 \u0026lt; hr / \u0026gt;\n默认是居中\n1 2 3 \u0026lt;hr color=\u0026#34;red\u0026#34; width=\u0026#34;300px\u0026#34; size=\u0026#34;20px\u0026#34; /\u0026gt; \u0026lt;hr color=\u0026#34;blue\u0026#34; width=\u0026#34;300px\u0026#34; size=\u0026#34;20px\u0026#34; align=\u0026#34;left\u0026#34;/\u0026gt; \u0026lt;hr color=\u0026#34;green\u0026#34; width=\u0026#34;300px\u0026#34; size=\u0026#34;20px\u0026#34; align=\u0026#34;right\u0026#34;/\u0026gt; width是左右多宽，size是上下多长\n图片标签 img\n1 \u0026lt;img src=\u0026#34;1.jpg\u0026#34; alt=\u0026#34;Kin的微信头像\u0026#34; width=\u0026#34;300px\u0026#34; height=\u0026#34;300px\u0026#34; title=\u0026#34;Kin的微信头像\u0026#34;\u0026gt; 一般就前三个属性即可\nsrc\n绝对路径：盘符完整路径\n相对路径：\n上级目录 ../\n同级目录 ./ 或者省略\n下级目录 /\n网络路径：\n图片是网络服务器的图片\n超文本链接标签 1 2 3 4 5 \u0026lt;!-- 5.超文本链接标签 --\u0026gt; \u0026lt;a\u0026gt;字\u0026lt;/a\u0026gt; \u0026lt;a\u0026gt;词语\u0026lt;/a\u0026gt; \u0026lt;a\u0026gt;这是一句话\u0026lt;/a\u0026gt; \u0026lt;a\u0026gt; \u0026lt;img src=\u0026#34;./同级目录/子级1目录/2.jpg\u0026#34; width=\u0026#34;200px\u0026#34; \u0026gt; \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;https://www.baidu.com/\u0026#34;\u0026gt;百度\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;https://www.163.com/\u0026#34;\u0026gt;网易\u0026lt;/a\u0026gt; 文本标签 可嵌套在p标签中\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;p\u0026gt; p\u0026lt;br\u0026gt; 我是一个段落标签 \u0026lt;em\u0026gt;em着重\u0026lt;/em\u0026gt; \u0026lt;b\u0026gt;b粗体\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt;i斜体\u0026lt;/i\u0026gt; \u0026lt;strong\u0026gt;strong加重语气\u0026lt;/strong\u0026gt; \u0026lt;del\u0026gt;del删除字\u0026lt;/del\u0026gt; \u0026lt;span\u0026gt;span无特定含义\u0026lt;/span\u0026gt; \u0026lt;br\u0026gt; p \u0026lt;/p\u0026gt; 有序列表标签 有序列表可嵌套\n默认是1\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;ol type=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;li\u0026gt;水果\u0026lt;ol type=\u0026#34;a\u0026#34;\u0026gt;\u0026lt;li\u0026gt;苹果\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;香蕉\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;芒果\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;蔬菜\u0026lt;ol type=\u0026#34;I\u0026#34;\u0026gt;\u0026lt;li\u0026gt;土豆\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;茄子\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;卷心菜\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;肉类\u0026lt;ol type=\u0026#34;i\u0026#34;\u0026gt;\u0026lt;li\u0026gt;牛肉\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;鸡肉\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;鱼肉\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;饮料\u0026lt;ol type=\u0026#34;A\u0026#34;\u0026gt;\u0026lt;li\u0026gt;牛奶\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;矿泉水\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;果汁\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; 你最喜欢吃什么\u0026lt;em\u0026gt;水果\u0026lt;/em\u0026gt;？ \u0026lt;ol type=\u0026#34;A\u0026#34;\u0026gt; \u0026lt;li\u0026gt;apple\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;banana\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;orange\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;mango\u0026lt;/li\u0026gt; 无序列表标签(导航效果) ul + li 标签\n快捷键\nul\u0026gt;li*4\n1 2 3 4 5 6 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;水果\u0026lt;ul type=\u0026#34;disc\u0026#34;\u0026gt;\u0026lt;li\u0026gt;苹果\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;香蕉\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;芒果\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;蔬菜\u0026lt;ul type=\u0026#34;circle\u0026#34;\u0026gt;\u0026lt;li\u0026gt;土豆\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;茄子\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;卷心菜\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;肉类\u0026lt;ul type=\u0026#34;square\u0026#34;\u0026gt;\u0026lt;li\u0026gt;牛肉\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;鸡肉\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;鱼肉\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;饮料\u0026lt;ul type=\u0026#34;none\u0026#34;\u0026gt;\u0026lt;li\u0026gt;牛奶\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;矿泉水\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;果汁\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 表格标签 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;table border=\u0026#34;1\u0026#34; width=\u0026#34;400px\u0026#34; height=\u0026#34;400px\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;单元格1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;单元格4\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格5\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格6\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;单元格7\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格8\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格9\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 快捷键\ntable\u0026gt;tr*2\u0026gt;td{单元格}\ntable\u0026gt;tr*3\u0026gt;td *5\ntable\u0026gt;tr * 3\u0026gt;td * 5{单元格$}\n水平合并 colspan\n垂直合并 rowspan\n表格属性\nborder 表格边框\nwidth 宽度\nheight 高度\n表单标签 表单由容器和控件组成\n容器：表单\n控件：输入框 按钮\nform + input\n容器标签 div容器标签区分不同区域\n使得代码模块化，更加清晰\ndiv 用id属性区分\nhtml5新增标签 对浏览器有兼容要求\n新增语义化标签\n1 2 3 4 5 6 7 \u0026lt;header\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;!-- 头部--\u0026gt; \u0026lt;nav\u0026gt;\u0026lt;/nav\u0026gt;\u0026lt;!-- 导航 --\u0026gt; \u0026lt;article\u0026gt;\u0026lt;!-- 代表一个独立的完整的相关内容块，如一篇完整的论坛帖子，一篇博客文章，一个用户评论等 --\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u0026lt;!-- 定义文档中的节，比如章节、页眉、页脚 --\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;aside\u0026gt;\u0026lt;/aside\u0026gt;\u0026lt;!-- 侧边栏 --\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt;\u0026lt;!-- 脚部 --\u0026gt; 属性(属性间以空格分隔) align 居中格式\ncolor 颜色\nwidth 左右宽度\nsize 上下长度\nsrc 路径(图片地址与名字)\nalt 规定图片的替代文本，图片显示不出来后会展示alt的内容\nwidth 规定图片的宽度\nheight 规定图片的高度\ntitle 鼠标悬停在图片上给予的提示\nhref 描述链接的地址，未访问蓝色；访问过紫色；点击时显示红色；后期css修改，悬停为小手\ntype 有序列表oi或者ui的属性，标号类别多样\nborder 表格边框\nrowspan colspan 表格合并\naction 表单服务器地址\nmethod 方法\nname 表单名称\ntype input的属性 可选为sumit\nvalue 为input的属性时，可选项为任意修改值\nid div属性\n属性置于标签里，但不推荐，后续css可以用\n块元素与行内元素(内联元素) 块元素：\ndiv\nform\nh1-h6\nhr\np\ntable\nul\n内联元素：\na,b,em,i,span,strong\n行内块级元素（不换行，但能识别宽高）\nbutton img input\nCSS 简介或快捷键 层叠样式表\n用于html文档中元素样式的定义，使网页更美观\n由选择器和一条或者多条声明(样式)构成\n属性间用分号隔开；属性与属性值用冒号割开\n1 div.container\u0026gt;div*3.box$ 引入方式 内联样式\n在标签内加上style属性\n适用于简单的页面\n内部样式\n在head标签中添加style标签，style标签内添加选择器与声明\n单个页面具有统一性和规划性，多个页面之间容易混乱\n外部样式(推荐)\n选择器 全局选择器 元素选择器 类选择器 一个标签选择多个类时要用空格分开\n多对多关系\nid选择器 合并选择器 多个选择器有相同的样式，则合并一起写，省去代码重复，用逗号分隔，相当于一种操作吧\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* 多个选择器有相同的样式，则合并一起写，省去代码重复，用逗号分隔，相当于一种操作吧 */ p,h1{color: red;font-size: 30px;} .class1,.class2{color: blue;font-size:40px;} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;p1\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p2\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p3\u0026lt;/p\u0026gt; \u0026lt;h1\u0026gt;h1\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;class2\u0026#34;\u0026gt;test1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;class2\u0026#34;\u0026gt;test2\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 优先级 相同则按照执行顺序，最后面的会覆盖前面的\n字体属性 color 名字；16进制；rgba格式(最后一个为透明度)\n1 2 3 4 5 6 7 \u0026lt;style\u0026gt; p{ color: red; color:#008c8c; color:rgba(69, 233, 23, 0.669) } \u0026lt;/style\u0026gt; font-size font-weight 一般最后一个数值为700\nfont-style font-family 1 2 3 \u0026lt;p\u0026gt; font-family: \u0026#34;Microsoft YaHei\u0026#34;; \u0026lt;/p\u0026gt; 背景属性 background-color: 背景颜色\nbackground-image:url 背景图片\nbackground-repeat 填充方式能否重复\nbackground-size 设置背景图片的大小\nbackground-position 设置背景图像的起始位置\n文本属性 text-align： 设置文本位置\n1 2 3 4 5 6 7 8 9 \u0026lt;style\u0026gt; h3{ /* 1.文本位置 */ text-align: left; text-align: right; text-align: center; } \u0026lt;/style\u0026gt; text-decoration: 文本的修饰\n1 2 3 4 5 text-decoration: overline; ​ text-decoration: line-through; ​ text-decoration: underline; text-transform: 控制文本的字母大小\n1 2 3 4 5 text-transform: uppercase; ​ text-transform: lowercase; ​ text-transform: capitalize; text-indent： 规定文本块中首行文本的缩进\n根据字体大小的倍数来设置\n表格属性 表格table,td边框 1 2 3 4 5 table,td{ ​ border: 1px solid red;/*外边框*/ ​ } 折叠table边框 1 2 3 table,td{ border-collapse:collapse; } 表格table的高度和宽度 1 2 width:500px height:500px 表格td文字对齐 1 2 3 4 5 6 7 8 9 /* 4.表格文字对齐 */ /* 水平对齐方式 */ text-align: left; text-align: right; text-align: center; /* 垂直对齐方式 */ vertical-align: top; vertical-align: bottom; vertical-align: middle; 表格td填充 不设置宽高的情况下使用padding撑开空间\n在td上下左右都是撑开指定大小\n1 padding: 50px; 表格颜色 关系选择器 后代选择器 1 2 3 4 ul li{ color: red; font-size: 40px; } 子代选择器 1 2 3 div\u0026gt;p{ color: red; } 相邻兄弟选择器 往下找\n1 2 3 h3+p{ color: red; } 通用兄弟选择器 1 2 3 h3~p{ color: red; } 盒子模型 padding:50px 20px 前面是上下，后面的值是左右\nborder：5px solid blue 第一个值是边框粗细，第二个是线的类型 ,第三个是颜色\nMargin：50px 10px 外边距:第一个值是上下，第二个值是左右\nauto是根据剩余空间平均分配\n弹性布局 最外面容器属性display设置为flex\n即可将块级元素实现水平排列\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;flex盒子模型\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .container{ width: 500px; height: 500px; background-color: #555; display: flex; } .box1{ width: 100px; height: 100px; background-color: red; } .box2{ width: 100px; height: 100px; background-color: green; } .box3{ width: 100px; height: 100px; background-color: blue; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; display属性 父元素属性 flex-direction 弹性子元素排列顺序方式主容器设置\n1 2 3 4 5 /* 1.弹性子元素排列顺序方式 */ flex-direction: column;/*从上到下*/ flex-direction: row-reverse; /*从右到左*/ flex-direction: column-reverse;/*从下到上*/ flex-direction: row;/*从左到右*/ justify-content 弹性子元素水平排列起始位置主容器设置\n1 2 3 4 /* 2.弹性子元素水平排列起始位置 */ justify-content: center; justify-content: flex-end; justify-content: flex-start; /*默认*/ align-items 弹性子元素垂直排列起始位置主容器设置\n1 2 3 4 /* 3.弹性子元素垂直排列起始位置 */ align-items: flex-end; align-items: flex-start;/*默认*/ align-items: center; 子元素属性 flex-grow有误差,用flex 设置之后宽高不再生效\n文档流 标准文档流: 按照默认规则的怕排列或者摆放方式,可能很多页面效果无法实现\n如:\n问题一:\n问题二:空格折叠\n问题三:元素无空隙\n换行后无空隙,不换行才有空隙,不换行不利于代码规范性\n1 2 3 \u0026lt;!-- 问题三元素无空隙 --\u0026gt; \u0026lt;img src=\u0026#34;./1.jpg\u0026#34; alt=\u0026#34;小姐姐\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./1.jpg\u0026#34; alt=\u0026#34;小姐姐\u0026#34;\u0026gt; 解决方法: 浮动（只能左右浮动） 增加浮层来放置内容\n宽度不够时下一行摆放\n导航横向摆放\n副作用： 给子元素添加浮动后父元素高度塌陷\n1 2 3 4 5 6 7 8 9 10 11 12 .container{ width: 500px; background-color: brown; } .box{ width: 100px; height: 100px; background-color: aqua; float:left; margin: 5px; /* float:right; */ } 后续元素受到影响\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- 后续元素受到影响 --\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 后续元素受到影响 --\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; 清除浮动\n1.父元素设置高度 但是要是父元素存在有非浮动的子元素还是会出现排列异常，从标准流头开始排列\n2.clear属性 为父元素中未设置浮动的子元素添加clear属性\nclear：left clear：right clear：both\n3.overflow清除浮动 应对子元素高度和宽度不一定以及后续与父级元素同级元素的排列，可能发生变化，防止频繁设置父元素高度造成不便\n未设置时的后续同级元素：\n这种情况下不能设置宽高，不然很难调整，如假如设置宽高：不符合实际要求而且需要自己繁琐地调整\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;浮动缺点\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .container{ width: 500px; /* 缺点1：未设置高度，而子元素设置浮动时，不会被撑开显示 */ /* 措施1.父元素设置高度 */ height: 500px; background-color: brown; } .box{ width: 100px; height: 100px; margin: 5px; background-color: aqua; float:left; /* float:right; */ } .text{ width: 100px; height: 100px; margin: 5px; background-color: blue; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 缺点3：与div.container同级别的后续块级元素受到影响 --\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 正确做法：\noverflow: hidden;\nclear: both;\n4.伪对象方式： 父级塌陷同时同级元素也也受到影响了的话\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;浮动缺点\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .container{ width: 500px; /* 缺点1：未设置高度，而子元素设置浮动时，不会被撑开显示 */ /* 措施1：父元素设置高度 */ /* height: 500px; */ background-color: brown; /* 措施3：overflow清除浮动（勿要设置父元素高度） overflow: hidden; clear: both; */ } /* 措施4：添加伪对象方式 ：：after */ .container::after{ content: \u0026#34;\u0026#34;; display: block; clear: both; } .box{ width: 100px; height: 100px; margin: 5px; background-color: aqua; float:left; /* float:right; */ } .text{ width: 100px; height: 100px; margin: 5px; background-color: blue; /* 措施2：为父元素中未设置浮动的子元素添加clear属性 */ clear:both; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- 缺点2：父元素下非浮动元素受到影响 --\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 缺点3：与div.container同级别的后续块级元素受到影响 --\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 定位 相对定位 位于标准流中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;定位\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div{ width: 200px; height: 200px; background-color: red; position: relative; left: 200px; top: 100px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 绝对定位（脱离文档流方法） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;绝对定位\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box1{ width: 300px; height: 300px; background-color: red; } .box2{ width: 200px; height: 200px; background-color: yellow; /* 设置绝对定位，可以有很多层 */ position: absolute; left: 100px; top: 200px; } .box3{ width: 200px; height: 200px; background-color: green; position: absolute; left: 150px; top: 250px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 固定定位 固定定位的内容都不会随着鼠标滑轮滚动而发生位置变化而消失\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;固定定位\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box1{ width: 300px; height: 300px; background-color: red; border: 1px solid blue; } .box2{ width: 100px; height: 100px; background-color: yellow; border: 1px solid blue; position:absolute; top:150px; left: 150px; } .box3{ width: 100px; height: 100px; background-color: green; border: 1px solid blue; position:fixed; bottom:200px; right: 200px; } p{ height: 500px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box1\u0026#34;\u0026gt;我是文档流的div\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box2\u0026#34;\u0026gt;我是绝对定位div\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box3\u0026#34;\u0026gt;我是固定定位div\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;pp\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;pp\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;pp\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;pp\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 问题：\n想让子元素根据父级元素的移动而移动就给父级元素添加相对定位\n堆叠顺序：\nZ-index：值越大越在上面\ncss3新特性 圆角 ​ border-radius: 20px;\n​ border-radius: 100%; 效果与50%是一样的\n阴影 为背景增加模糊效果\n动画 执行\n在box中设置\n默认是不执行的。要设置鼠标滑动在上面时开始执行\n用hover属性：\n呼吸 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;呼吸\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 500px; height: 500px; margin: 40px auto; background-color: #2b92d4; border-radius: 50%; box-shadow: 0 1px 2px rgba(0,0,0,0.3); animation: breathe 1s ease-in-out infinite alternate; } @keyframes breathe{ 0%{ opacity: 0.2; box-shadow:0 1px 10px green; } 50%{ opacity: 0.5; box-shadow: 0 1px 10px yellow; } 100%{ opacity: 1; box-shadow:0 1px 10px red; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 媒体查询 语法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;媒体查询\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 300px; height: 300px; /* margin: 10px auto; */ } /* 苹果手机宽度乘以2 */ @media screen and (max-width: 768px){ /* 设备小于786的加载样式 :手机*/ .box{ background-color: red; } .p1{ display: none; } .p2{ display: none; } } @media screen and (min-width: 768px) and (max-width: 996px){ /* 设备大于786小于996的加载样式:平板*/ .box{ background-color: yellow; } .p1{ display: block; } .p2{ display:none; } } @media screen and (min-width: 996px){ /* 设备大于996的加载样式:电脑 */ .box{ background-color: green; } .p1{ display: block; } .p2{ display:block; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;p1\u0026#34;\u0026gt;平板或者电脑设备才会看到呦\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;p2\u0026#34;\u0026gt;仅有电脑设备才会看到呦\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 主要 and 后面要有空格\n雪碧图（精灵图） 利用\n​ background-image: url(1.jpg);\n​ background-position: -38px -25px;\n属性来调整位置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;雪碧图\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .icon1{ /* 行内元素变为块级元素 */ display: block; width: 38px; height: 45px; border: 1px solid red; background-image: url(1.jpg); background-position: -38px -25px; } .icon2{ /* 行内元素变为块级元素 */ display: block; width: 38px; height: 45px; background-image: url(1.jpg); border: 1px solid red; background-position: -261px -192px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;span class=\u0026#34;icon1\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;icon2\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; JAVASCRIPT 操作浏览器能力\n广泛的使用领域\n易学性\n语句与标识符号 1 var num = 10； 保留关键字不能做标识符\n变量 声明一次就可重新赋值\n打印用：\nconsole.log\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;变量\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var num = 10; var age = 19; // 重新赋值 age = 20; //打印 console.log(age); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 先打印后声明不会报错，但是会呈现出undefined\n实际顺序可能是：\n引入到文件 1.嵌入到html文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;嵌入到html文件\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var age = 19; console.log(age); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2.引入本地独立js文件 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;./引入本地独立js文件.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 3.引入网络来源文件 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;引入网络来源文件\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 输出方式 弹出框输出\nalert(\u0026ldquo;我是弹出框输出内容\u0026rdquo;);\n页面输出\ndocument.write(\u0026ldquo;我是页面输出内容\u0026rdquo;);\n控制台输出\nvar text=\u0026ldquo;我是控制台输出内容\u0026rdquo;;\n​ console.log(text);\n数据类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;原始类型\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; //数值 var age =20; //字符串 var name=\u0026#39;Kin\u0026#39;; //布尔类型 var flag = true; var flag = false; //合成类型,引用数据类型，复合对象类型，object(对象) var user = { age : 19, name : \u0026#39;Kin\u0026#39;, flag : true, } var hello =null; var world =undefined; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 原始类型(基础类型) 数值\n字符串\n布尔值\n合成类型(复合类型) 特殊值\nundefined\nnull\ntypeof运算符 判断基本数据类型\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;typeof\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var age = 20; var name = \u0026#39;Kin\u0026#39;; var flag = true; var user = { age : 20, name : \u0026#39;Kin\u0026#39;, flag : true, } var a=[1,2,3]; console.log(typeof age);//number console.log(typeof name);//string console.log(typeof flag);//boolean console.log(typeof user);//object console.log(typeof a);//数组可能也会返回object console.log(typeof null);//null可能也会返回object console.log(typeof undefined);//undefined // null 一般代表对像为\u0026#34;没有\u0026#34; // undefined 一般代表数值为\u0026#34;没有\u0026#34; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 算数运算符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;算术运算符\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var num1=100; var num2=10; //加减乘除 console.log(num1+num2); console.log(num1-num2); console.log(num1*num2); console.log(num1/num2); //取余 console.log(num1%num2);//0 //自增自减 var num3=20; console.log(++num3); //21 console.log(--num3); //20 var num4=10; // console.log(++num4); //先自增再运算：11 console.log(num4++); //先运算再自增：10 var x=5; var y=5; console.log(x++ + --y); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 赋值运算符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;赋值运算符\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var num1=100; var num2=num1; console.log(num1); //200 var x =10; var y =10; console.log(x+=y);//x=x+y=20 console.log(x-=y);//x=x-y=20-10=10 console.log(x*=y);//x=x*y=100 console.log(x/=y);//x=x/y=100/10 console.log(x%=y);//x=x%y=0 \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 比较运算符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;比较运算符\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; console.log(10\u0026gt;20);//false console.log(10\u0026lt;20);//true console.log(10\u0026lt;=20);//true console.log(10\u0026gt;=20);//false // \u0026#34;===\u0026#34;严格相等运算符：严格比较数值本身以及类型 console.log(10==10);//true console.log(10==\u0026#34;10\u0026#34;);//true console.log(10===10);//true console.log(10===\u0026#34;10\u0026#34;);//false console.log(10!=\u0026#34;10\u0026#34;);//false //\u0026#34;!==\u0026#34;严格不相等： console.log(10!==\u0026#34;10\u0026#34;);//true \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 布尔运算符 取反运算！ 1 2 3 4 5 6 7 //以下均为true，其他取反均为flase console.log(!null); console.log(!undefined); console.log(!0); console.log(!\u0026#34;flag\u0026#34;); console.log(!NaN); console.log(!false); 且运算\u0026amp;\u0026amp; console.log(10\u0026lt;20 \u0026amp;\u0026amp; 100\u0026lt;20)//false\n或运算|| console.log(10\u0026lt;20 || 100\u0026lt;20)//true\n条件语句 if\n不要用赋值运算符在条件判断里面\nif-else\nif-else if-else\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;if-esle语句\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var flag = true; if (flag) { console.log(\u0026#34;孙悟空\u0026#34;); }else{ console.log(\u0026#34;六耳猕猴\u0026#34;); } var day=3; if(day===0){ console.log(\u0026#34;今天星期一\u0026#34;); }else if(day===1){ console.log(\u0026#34;今天星期二\u0026#34;); }else if(day===2){ console.log(\u0026#34;今天星期三\u0026#34;); }else if(day===3){ console.log(\u0026#34;今天星期四\u0026#34;); }else if(day===4){ console.log(\u0026#34;今天星期五\u0026#34;); }else if(day===5){ console.log(\u0026#34;今天星期六\u0026#34;); }else if(day===6){ console.log(\u0026#34;今天星期天\u0026#34;); } var eat = true; var food = \u0026#34;肠粉\u0026#34;; if(eat){ if(food === \u0026#34;肠粉\u0026#34;){ console.log(\u0026#34;肠粉\u0026#34;); }else{ console.log(\u0026#34;黄瓜\u0026#34;); } }else{ console.log(\u0026#34;不吃了\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; switch\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;script\u0026gt; var day=3; switch(day) { case 0: console.log(\u0026#34;今天星期一\u0026#34;);break; case 1: console.log(\u0026#34;今天星期二\u0026#34;);break; case 2: console.log(\u0026#34;今天星期三\u0026#34;);break; case 3: console.log(\u0026#34;今天星期四\u0026#34;);break; case 4: console.log(\u0026#34;今天星期五\u0026#34;);break; case 5: console.log(\u0026#34;今天星期六\u0026#34;);break; default: console.log(\u0026#34;今天星期日\u0026#34;);break; } \u0026lt;/script\u0026gt; 注意加break\n三元运算符 (条件)？表达式1：表达式2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;script\u0026gt; var num =10; //判断奇数还是偶数 if(num %2===0){ console.log(\u0026#34;偶数\u0026#34;); }else{ console.log(\u0026#34;奇数\u0026#34;); } //三目运算符 var result = num%2===0 ? \u0026#34;偶数\u0026#34; : \u0026#34;奇数\u0026#34;; console.log(result); \u0026lt;/script\u0026gt; 循环 for循环：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;for\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; for (var i = 1; i \u0026lt;=5; i++){ console.log(i); } //省略 var x=10; var i = 0 for(;i\u0026lt;x;){ console.log(i); i++; } //1~100累加和 var sum = 0; for(var i = 1; i \u0026lt;=100; i++){ sum+=i; } console.log(sum); //100以内的奇数 for(var i = 1; i \u0026lt;=100; i++){ if(i%2!=0){ console.log(i); } } //九九乘法表 var sum =0; for(var i = 1; i \u0026lt;=9; i++){ document.write(\u0026#34;\u0026lt;br/\u0026gt;\u0026#34;); for(var j = 1; j\u0026lt;=i;j++){ sum=i*j; document.write(j+\u0026#34;*\u0026#34;+i+\u0026#34;=\u0026#34;+sum+\u0026#34; \u0026#34;); } } // i=1:j=1 // i=2:j=1 j=2 // i=3:j=1 j=2 j=3 //... // i=9:j=1 j=2 j=3 ... j=9 \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; while循环：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;while\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; //循环打印出1-10的值 var i =1; while (i\u0026lt;=10){ console.log(i); i++; } var sum=0; var i=1; while (i\u0026lt;=100){ sum+=i; i++; } console.log(sum); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; break和continue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;script\u0026gt; //需求，：i=5则停止 for(var i=0; i\u0026lt;10;i++){ if(i ==5){ break; } console.log(i); } //需求：i=5则跳出本轮循环 for(var i=0; i\u0026lt;10; i++){ if(i ==5){ continue; } console.log(i); } \u0026lt;/script\u0026gt; break结束循环，continue跳过一次循环\n字符串 单引号嵌套双引号\n双引号嵌套单引号\n双双或者单单嵌套则要加\u0026quot;\u0026quot;转义\n1.求长度： s1.length\n2.返回指定索引的值：s1.charAt(num)\n3.连接n个字符串(非字符串会自动转),不改变原来字符串：s1.concat(s2,s3\u0026hellip;sn)s1.concat(s2,s3\u0026hellip;sn)也可以用”+“来连接字符串，前者不会对数值类型做运算，而+会先做运算再连接\n4.截取一段字符串（结束位置）：substring(起始位置，结束位置但不包含)\n5.截取一段字符串（长度）：substr(起始位置,长度)\n6.确定一个字符或字符串在另一个字符串的位置,存在返回第一次出现的位置，不存在返回-1：.indexOf(\u0026quot;\u0026quot;,起始位置)\n7.去掉可选的特殊字符，如空格，回车符\\r 换行符\\n，制表符\\t \\v等：.trim()\nES6后可以单独去掉尾部或者头部的空格：.trimStart()，.trimEnd()\\\n8.按照指定的字符分割：.split(\u0026ldquo;char\u0026rdquo;,\u0026ldquo;最大成员\u0026rdquo;),返回一个数组[]\n无参数则默认为整个字符串\n以\u0026quot;\u0026ldquo;为分隔则代表是每个字符\n以\u0026rdquo; \u0026ldquo;空字符为分隔\n第二个参数指定最大成员数目\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;字符串方法\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; //1.求长度： s1.length var s1=\u0026#34;Kin\u0026#34;; console.log(s1.length); // 2.返回指定索引的值：s1.charAt(num) //最后一位 console.log(s1.charAt(s1.length-1)); //负数或者超过长度则返回空字符串 console.log(s1.charAt(-3)); console.log(s1.charAt(s1.length)); console.log(s1.charAt(12)); //3.连接n个字符串(非字符串会自动转),不改变原来字符串：s1.concat(s2,s3...sn) var s1 =\u0026#34;my name is \u0026#34;; var s2 =\u0026#34;Kin\u0026#34;; var s3 =666; var result=s1.concat(s2,s3); console.log(result); console.log(typeof s3); //还可以直接用\u0026#34;+\u0026#34;来连接 console.log(s1+s2+s3); //4.截取一段字符串（结束位置）：substring(起始位置，结束位置但不包含) var s1 =\u0026#34;my name is Kin\u0026#34;; //不写后面那个参数则代表直接到末尾 console.log(s1.substring(2,8)); console.log(s1.substring(11,)); //要是第一个参数大于第二个参数，则自动调换 console.log(\u0026#34;s1.substring(8,2)=s1.substring(2,8)=\u0026#34;+s1.substring(8,2)); //要是出现参数为负数，则自动转为0 console.log(s1.substring(2,-8));//0-2 // 5.截取一段字符串（长度）：substr(起始位置,长度) var s1 =\u0026#34;my name is Kin\u0026#34;; console.log(s1.substr(2,6)); //省略后面参数则代表到末尾 console.log(s1.substr(11,)); //第一个参数为负数则表示倒数开始，第二个参数为负数则自动转为0，返回空字符 console.log(s1.substr(-3)) console.log(s1.substr(5,-3)) //6.确定一个字符或字符串在另一个字符串的位置,存在返回第一次出现的位置，不存在返回-1：.indexOf(\u0026#34;\u0026#34;,起始位置) //字符 var s1 =\u0026#34;my name is Kin\u0026#34;; console.log(s1.indexOf(\u0026#34;K\u0026#34;)); console.log(s1.indexOf(\u0026#34;？\u0026#34;)); // 字符串 console.log(s1.indexOf(\u0026#34;Kin\u0026#34;)); //第二个参数代表从对应位置后开始查找 console.log(s1.indexOf(\u0026#34;Kin\u0026#34;,8)); // 7.去掉可选的特殊字符，如空格，回车符\\r 换行符\\n，制表符\\t \\v等：.trim() //空格（中间空格去不掉，只能去除两边的空格） var s1 =\u0026#34; my name is Kin \u0026#34;; var result = s1.trim(); console.log(result,s1); //换行、制表、回车符号等 var s1 =\u0026#34;\\r\\nmy name is Kin\\t\u0026#34;; var result = s1.trim(); console.log(result,s1); //ES6后可以单独去掉尾部或者头部的空格：.trimStart()，.trimEnd() var s1 =\u0026#34; my name is Kin \u0026#34;; var result1 = s1.trimStart(); var result2 = s1.trimEnd(); console.log(result1,result2) // 8.按照指定的字符分割：.split(\u0026#34;char\u0026#34;,\u0026#34;最大成员\u0026#34;),返回一个数组[] //无参数则默认为整个字符串 var s1 =\u0026#34;my name is Kin\u0026#34;; var result = s1.split(); console.log(result); //以\u0026#34;\u0026#34;为分隔则代表是每个字符 var s1 =\u0026#34;my name is Kin\u0026#34;; var result = s1.split(\u0026#34;\u0026#34;); console.log(result); //以\u0026#34; \u0026#34;空字符为分隔 var s1 =\u0026#34;my name is Kin\u0026#34;; var result = s1.split(\u0026#34; \u0026#34;); console.log(result); //第二个参数 var s1 =\u0026#34;my name is Kin\u0026#34;; var result = s1.split(\u0026#34;\u0026#34;,5); console.log(result); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 数组 基本简介 可容纳任何数据类型\n可先声明再赋值\n下标从0开始\n数组越界则显示为undefined\n方法大全 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;数组的方法\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var num = 10; console.log(typeof num);//number var arr =[1,2,3] console.log(typeof arr);//object //1.判断是否为一个数组：Array.isArray() console.log(Array.isArray(arr));//true //2.尾部追加一条或者多条元素，并返回新元素的数组长度，会改变原数组：.push() console.log(arr.push(\u0026#34;Kin\u0026#34;));//4 console.log(arr); //3.删除最后一个元素，并返回该元素，会改变原来的数组：.pop() var a=[1,2,3] console.log(a.pop());//3 console.log(a); //4.删除数组的第一个元素，并返回该元素，会改变原来的数组:.shift() var a=[1,2,3] console.log(a.shift());//1 console.log(a); //清空一个数组 var a=[1,2,3]; var item; while(item = a.shift()){ console.log(item); } console.log(a); //5.在头部添加元素,返回元素个数:unshift.() var a=[1,2,3] console.log(a.unshift(564,23)); //6.指定参数(默认逗号)作为分隔符,连成一个字符串 var a=[1,2,3]; console.log(a.join()); //1,2,3 console.log(a.join(\u0026#34;|\u0026#34;)); //1|2|3 console.log(a.join(\u0026#34;\u0026#34;)); //123 console.log(a.join(\u0026#34; \u0026#34;)); //1 2 3 //数组成员是undefined或者null或空位,则会被转成空字符串 console.log([1, ,2,undefined,3,null].join(\u0026#34;#\u0026#34;)) //1##2##3# //相互转换.根据split和join var b = [1,2,3,5]; console.log(b.join(\u0026#34; \u0026#34;));//1 2 3 5 console.log(b.join(\u0026#34; \u0026#34;).split(\u0026#34; \u0026#34;)); //7.合并数组(上拉加载,合并数据),不改变原来数组:.concat() var firstname = [\u0026#39;Kin\u0026#39;]; var lastname = [\u0026#39;Smith\u0026#39;]; console.log(firstname.concat(lastname)); //[\u0026#39;Kin\u0026#39;,\u0026#39;Smith\u0026#39;] console.log(firstname); //[\u0026#39;Kin\u0026#39;] console.log(lastname); //[\u0026#39;Smith\u0026#39;] console.log([1,2,3].concat(4,5,6,[7,8,9])); //[1,2,3,4,5,6,7,8,9] //8.逆序数组,会改变原来数组:.reverse() console.log([1,2,3].reverse()); //[3,2,1] //split():str-\u0026gt;arr join():arr-\u0026gt;str 数组反转:reverse //逆序字符串的实践:将字符串str=\u0026#34;dlroWolleH\u0026#34;反转显示 console.log(\u0026#34;dlroWolleH\u0026#34;.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;)); //9.查找数组中元素第一次出现的位置:.indexOf(带查找元素,起始位置) var num =[0,1,2,3,4,5,6,7,8,9]; console.log(num.indexOf(5));//5 console.log(num.indexOf(778));//-1 //实践:判断数组中是否存在元素 if(num.indexOf(4)\u0026gt;-1){ console.log(\u0026#34;存在\u0026#34;); }else{ console.log(\u0026#34;不存在\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;函数\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; //可以先调用后声明:函数提升 function add(x,y){ return x+y;//return 后面添加的代码无法执行 } var result = add(10,100); console.log(result); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;对象\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; //创建一个对象user:可包含很多类型的数据 var user = { name : \u0026#39;KinSmith\u0026#39;, age: 19, grades :[99,100,97], flag : true, getName:function() { console.log(user.name); }, container:{ frontEnd:\u0026#34;WEB前端\u0026#34;, backEnd:[\u0026#34;python\u0026#34;,\u0026#34;java\u0026#34;] } } //对象读取方式:对象名.属性 console.log(user.name); console.log(user.age); //打印对象内的数组 for(var i=0;i\u0026lt;user.grades.length;i++){ console.log(user.grades[i]); } //调用对象内的函数 user.getName(); //链式调用,调用对象中的对象 console.log(user.container.frontEnd); console.log(user.container.backEnd); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 数学对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;数学对象\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var num =-100; //1.绝对值 console.log(Math.abs(num));//100 //2.最大最小值 console.log(Math.max(10,100));//100 console.log(Math.min(10,100));//10 //3.向上向下取整 console.log(Math.ceil(9.5));//10 console.log(Math.floor(9.5));//9 //4.随机数0\u0026lt;num\u0026lt;1 console.log(Math.random()) //实践:弄一个生成两数之间的随机数 function GetRandom(num1,num2){ return Math.random()*Math.abs(num1-num2)+Math.min(num1,num2) } console.log(GetRandom(10,20)) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Date对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Date对象\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; //1.获取现在时间:当前时间-1970年1月1日00:00:00UTC的毫秒数 console.log(Date.now());//1721151847774 //2.获取转换后的时间 console.log(new Date()); //3.获取更加高效的时间 var d =new Date(); console.log(d.getTime());//1970年1月1日00:00:00UTC的毫秒数 console.log(d.getFullYear());//返回四位的年份 console.log(d.getMonth());//月份:0-11 console.log(d.getDay());//返回星期几,星期日为0 console.log(d.getDate());//对应每个月的几日 console.log(d.getHours());//返回小时:0-23 console.log(d.getMinutes());//返回分钟:0-59 console.log(d.getSeconds());//返回秒:0-59 \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; DOM DOM是操作页面的接口\n获取元素 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;获取元素\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;hello1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;hello2\u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;text\u0026#34;\u0026gt;fad\u0026lt;/p\u0026gt; \u0026lt;form name=\u0026#34;login\u0026#34;\u0026gt;\u0026lt;/form\u0026gt; \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt;You get root???\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;nav\u0026#34;\u0026gt;nav1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;nav\u0026#34;\u0026gt;nav2\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //html5以前就存在的 //1.通过标签名返回元素的数组对象（*则是代表全部标签元素）:document.getElementsByTagName var divs = document.getElementsByTagName(\u0026#34;div\u0026#34;); var div1 = document.getElementsByTagName(\u0026#34;div\u0026#34;)[0]; var div2 = document.getElementsByTagName(\u0026#34;div\u0026#34;)[1]; var all = document.getElementsByTagName(\u0026#34;*\u0026#34;); console.log(divs); console.log(div1); console.log(div2); console.log(all); // 通过js操作页面元素功能 div1.innerHTML = \u0026#34;Hello world!\u0026#34;; //2.通过类名来返回元素的数组对象(可多个class名，空格隔开) var text = document.getElementsByClassName(\u0026#34;text\u0026#34;); text.innerHTML = \u0026#34;???\u0026#34; console.log(text); //3.通过增加name属性来查找并返回元素的数组对象(使用率低) var name = document.getElementsByName(\u0026#34;login\u0026#34;); console.log(name); //4.使用ID返回该单个元素（最常用） var id = document.getElementById(\u0026#34;root\u0026#34;); console.log(id); id.innerHTML = \u0026#34;Yes\u0026#34;; //html5更新的 //5.按CSS选择器作为参数，返回匹配该选择器的元素节点，多个节点满足返回第一个 var nav = document.querySelector(\u0026#34;.nav\u0026#34;); console.log(nav); //6.按CSS选择器作为参数，返回匹配该选择器的所有元素节点 var navs = document.querySelectorAll(\u0026#34;.nav\u0026#34;); console.log(navs); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 创建元素 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;创建元素\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;nav\u0026#34;\u0026gt;导航\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //1.通过js创建标签 var text = document.createElement(\u0026#34;p\u0026#34;); // console.log(text); //2.通过js创建文本内容，再将内容或者子元素放到容器中：appendChild var content = document.createTextNode(\u0026#34;我是段落标签文本\u0026#34;); // console.log(content); text.appendChild(content); // console.log(text); //3.通过js创建属性以及赋值和将属性加入标签中 var id = document.createAttribute(\u0026#34;id\u0026#34;); id.value=\u0026#34;root\u0026#34;; text.setAttributeNode(id); console.log(text); //4.为了将完整的标签属性内容显示出来 // 将子元素放入父元素当中,读取父元素和子元素，再添加子元素 var container = document.getElementById(\u0026#34;container\u0026#34;); container.appendChild(text); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Element对象属性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Element对象属性\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 200px; height: 200px; } .box1{ background-color: aqua; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; id=\u0026#34;root\u0026#34;\u0026gt;Hello\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 1.对Id可读可写操作: .id var root =document.getElementById(\u0026#34;root\u0026#34;); // root.id = \u0026#34;roots\u0026#34;; //2.对类选择器赋值操作： .className root.className = \u0026#34;box box1\u0026#34;;//通过js实现对css的交互，补充 //3.对类选择器进行各种操作 //添加类别.classList.add() console.log(root.classList.add(\u0026#34;mybox\u0026#34;)); //移除类别.classList.remove() console.log(root.classList.remove(\u0026#34;box\u0026#34;)); //判断是否存在类别.classList.contains() if(root.classList.contains(\u0026#34;box1\u0026#34;)){ console.log(\u0026#34;存在box1类\u0026#34;); }else{ console.log(\u0026#34;不存在box1类\u0026#34;); } //将某个class移入或者移出当前元素，不存在就加入，否则移除 console.log(root.classList.toggle(\u0026#34;mybox\u0026#34;));//存在，删除 console.log(root.classList.toggle(\u0026#34;box2\u0026#34;));//不存在，加入 console.log(root);//\u0026lt;div class=\u0026#34;box1 box2\u0026#34; id=\u0026#34;root\u0026#34;\u0026gt;大家好\u0026lt;/div\u0026gt; //4.读取或者修改元素内容 console.log(root.innerHTML);//读取内容(可识别标签) console.log(root.innertext);//读取内容(会把标签识别为一个字符串) console.log(root.innerHTML=\u0026#34;大家好\u0026#34;);//设置内容 var str = \u0026#34;\u0026lt;a href=\u0026#39;https://www.baidu.com\u0026#39;\u0026gt;百度\u0026lt;/a\u0026gt;\u0026#34; root.innerHTML = str;//会有链接 root.innerText = str;//不会有链接，识别不了 \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Element获取元素位置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Element获取元素位置\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *{ padding: 0; margin:0; } .root{ width:500px; height: 500px; border: 5px solid red; padding: 10px; margin:50px; background-color: yellow; position: relative;/*后代相对的是页面*/ } .box1{ width:200px; height: 200px; border: 5px solid red; padding: 10px; margin:100px; background-color: green; } .box2{ width:200px; height: 200px; border: 5px solid black; padding: 10px; margin:40px; background-color: blue; } h3{ height: 300px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;root\u0026#34; \u0026gt; \u0026lt;div class=\u0026#34;box1\u0026#34; id=\u0026#34;box1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box2\u0026#34; id=\u0026#34;box2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;标题1\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;标题2\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;标题3\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;标题4\u0026lt;/h3\u0026gt; \u0026lt;script\u0026gt; var box = document.getElementById(\u0026#34;box\u0026#34;); // 1.获取元素高度和宽度，为内容与padding之和，不包含margin和border(较少用) console.log(box1.clientHeight);//220 console.log(box1.clientWidth);//220 //2.获取视口高度（屏幕高度）和页面的高度 console.log(document.documentElement.clientHeight)//911 console.log(document.body.clientHeight) console.log(\u0026#34;--------------------------------\u0026#34;); //3.获取元素总高度,不包含margin和border，基本和上面区别不大 console.log(box1.scrollHeight);//220 console.log(box1.scrollWidth);//220 console.log(document.documentElement.scrollHeight)//911 console.log(document.body.scrollHeight)//500 包含margin和border console.log(\u0026#34;--------------------------------\u0026#34;); //4.获取向下和向右滚动高度 console.log(document.documentElement.scrollTop) console.log(document.documentElement.scrollLeft) console.log(\u0026#34;--------------------------------\u0026#34;); //5.获取css元素的高度宽度，包含内容+padding+border console.log(box1.offsetHeight);//230 console.log(box1.offsetWidth);//230 console.log(\u0026#34;--------------------------------\u0026#34;); //6.定位父级左边距和上边距的距离 //父级元素设置相对定位：100+10=110(自生margin+父级padding) //父级元素设置非相对定位：100+50+10+5=165(自身margin+父级元素的padding+margin+border) console.log(box1.offsetLeft);//初始浏览器与左边是有一定的距离的，除非全局选择器修改 console.log(box1.offsetTop);// \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; CSS操作 利用javascript设置css样式\n1.采用setAttribute方法设置style属性(不方便)\n1 2 3 // 1.采用setAttribute方法设置style属性(不方便) var box1 = document.getElementById(\u0026#34;box1\u0026#34;); box1.setAttribute(\u0026#34;style\u0026#34;,\u0026#34;width:200px;height:200px;background:red;\u0026#34;); 2.利用元素节点的style属性\n1 2 3 4 5 // 2.利用元素节点的style属性(常用) var box2 = document.getElementById(\u0026#34;box2\u0026#34;); box2.style.height = \u0026#34;300px\u0026#34;; box2.style.width = \u0026#34;300px\u0026#34;; box2.style.backgroundColor = \u0026#34;green\u0026#34; ; 3.cssText属性\n1 2 3 4 5 6 7 8 // 3.cssText属性 var box3 = document.getElementById(\u0026#34;box3\u0026#34;); box3.style.cssText=\u0026#34;width:400px;height:400px;background:yellow;\u0026#34; // 或者 box3.style.cssText= \u0026#39;width:400px;\u0026#39; +\u0026#39;height:400px;\u0026#39; +\u0026#39;background:yellow;\u0026#39; 事件处理程序 1.html事件处理 在按钮上设置onClick即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;html事件处理\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button onClick=\u0026#34;clickHandle()\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function clickHandle(){ console.log(\u0026#34;点击了按钮\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2.DOM0事件处理\n获取元素后\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;DOM0事件处理\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 2.DOM0事件实现html和js是分离的 --\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var btn = document.getElementById(\u0026#34;btn\u0026#34;); btn.onclick = function() { console.log(\u0026#34;点击了\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 3.DOM2级事件\n实现多个事件的触发\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;DOM0事件处理\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 3.DOM2事件实现html和js是分离的 --\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var btn = document.getElementById(\u0026#34;btn\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;,function(){ console.log(\u0026#34;点击了1\u0026#34;); }) btn.addEventListener(\u0026#34;click\u0026#34;,function(){ console.log(\u0026#34;点击了2\u0026#34;); }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 事件处理之鼠标事件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;鼠标进入和离开的区别\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .root{ width: 300px; height: 300px; background-color: aqua; } .box{ width: 100px; height: 100px; background-color: chocolate; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;root\u0026#34; id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; id=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //只给父级元素添加onmouse属性的情况下 //mouseenter\\mouseleave :父元素触发次数，子元素不算 var root = document.getElementById(\u0026#34;root\u0026#34;) var box = document.getElementById(\u0026#34;box\u0026#34;) root.onmouseenter = function(){ console.log(\u0026#34;鼠标进入了enter\u0026#34;); } root.onmouseleave = function(){ console.log(\u0026#34;鼠标离开了leave\u0026#34;); } // mouserover\\mouseout:父元素和子元素都算次数 root.onmouseover = function(){ console.log(\u0026#34;鼠标进入了over\u0026#34;); } root.onmouseout = function(){ console.log(\u0026#34;鼠标离开了out\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 进入和离开区别：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;鼠标进入和离开的区别\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .root{ width: 300px; height: 300px; background-color: aqua; } .box{ width: 100px; height: 100px; background-color: chocolate; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;root\u0026#34; id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; id=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //只给父级元素添加onmouse属性的情况下 //mouseenter\\mouseleave :父元素触发次数，子元素不算 var root = document.getElementById(\u0026#34;root\u0026#34;) var box = document.getElementById(\u0026#34;box\u0026#34;) root.onmouseenter = function(){ console.log(\u0026#34;鼠标进入了enter\u0026#34;); } root.onmouseleave = function(){ console.log(\u0026#34;鼠标离开了leave\u0026#34;); } // mouserover\\mouseout:父元素和子元素都算次数 root.onmouseover = function(){ console.log(\u0026#34;鼠标进入了over\u0026#34;); } root.onmouseout = function(){ console.log(\u0026#34;鼠标离开了out\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Event事件 属性和方法\n常用属性：\nevent.target\n返回事件当前所在的节点以供修改\nevent.type\n返回事件的类型，单击、双击、移动等等\n常用方法：\n阻止默认事件\n阻止事件冒泡\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Event事件对象\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .root{ width:200px; height:200px; background-color: blue; } .box{ width: 100px; height: 100px; background-color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;a href=\u0026#34;https://baidu.com\u0026#34; id=\u0026#34;baidu\u0026#34;\u0026gt;百度\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;root\u0026#34; id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; id=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //Event事件对象常用属性 var btn = document.getElementById(\u0026#34;btn\u0026#34;); btn.onclick = function(event){ // 1.返回事件当前所在的节点以供修改 event.target.innerHTML =\u0026#34;点击之后\u0026#34;; // 2.返回事件的类型，单击、双击、移动等等 console.log(event.type); } //Event事件对象常用方法 var baidu = document.getElementById(\u0026#34;baidu\u0026#34;); baidu.onclick = function(e){ // 3.阻止了默认事件(如跳转链接) e.preventDefault();//该方法点击标签后不会跳转 console.log(\u0026#34;点击了并不会实现跳转\u0026#34;); } //4.实现父级元素和子级元素的部分方法触发独立 // 一般情况是点击子级元素时，父级元素也会打印，点box，也会有root //设置后点击子级元素就不会打印父级元素 root = document.getElementById(\u0026#34;root\u0026#34;); box = document.getElementById(\u0026#34;box\u0026#34;); root.onclick=function(){ console.log(\u0026#34;root\u0026#34;); } box.onclick=function(e){ e.stopPropagation();//添加后子元素同时触发父级元素 console.log(\u0026#34;box\u0026#34;);//子元素一般也会向上传递触发父级元素 } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 键盘事件 onkeyup\nonkeydown\nonkeypress\ne.keyCode\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;键盘事件\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; onkeydown:\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username1\u0026#34;\u0026gt;\u0026lt;br\u0026gt; onkeyup:\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username2\u0026#34;\u0026gt;\u0026lt;br\u0026gt; onkeypress：\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username3\u0026#34;\u0026gt;\u0026lt;br\u0026gt; keyCode：\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;ascii\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;script\u0026gt; var username1 = document.getElementById(\u0026#34;username1\u0026#34;); var username2 = document.getElementById(\u0026#34;username2\u0026#34;); var username3 = document.getElementById(\u0026#34;username3\u0026#34;); var ascii = document.getElementById(\u0026#34;ascii\u0026#34;); // 1.键盘按下 username1.onkeydown = function(e){ console.log(\u0026#34;键盘按下触发事件\u0026#34;); // console.log(e.target.value);//获取输入框的值，但是是按下才获取，第一次按下还没有值 } // 2.键盘抬起获取值 username2.onkeyup = function(e){ console.log(\u0026#34;键盘抬起触发事件\u0026#34;); console.log(e.target.value);//一般抬起获取值 } // 3.键盘有值键(数字、字母)触发，无值键如：Tab、Del、Backspace、Ctrl、Alt、Shift、Meta不触发 username3.onkeypress = function(){ console.log(\u0026#34;onkeypress\u0026#34;); } // 4.按键的唯一标识ascii码 ascii.onkeyup = function(e){ console.log(e.keyCode); if(e.keyCode === 13){ console.log(\u0026#34;开始搜索\u0026#34;); } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 表单事件 input\nselect\nchange\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;表单事件\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; oninput:\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username1\u0026#34;\u0026gt;\u0026lt;br\u0026gt; onselect:\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username2\u0026#34;\u0026gt;\u0026lt;br\u0026gt; onchange:\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username3\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;script\u0026gt; // 1.只要输入就能获取内容 var username1 = document.getElementById(\u0026#34;username1\u0026#34;); username1.oninput = function(e){ console.log(\u0026#34;输入了:\u0026#34;+e.target.value); } // 2.选中内容才会触发事件（用的少） var username2 = document.getElementById(\u0026#34;username2\u0026#34;); username2.onselect=function(e){ console.log(\u0026#34;选中了:\u0026#34;+e.target.value); } // 3.修改完全后回车或失去焦点才会触发 var username3 = document.getElementById(\u0026#34;username3\u0026#34;); username3.onchange = function(e){ console.log(\u0026#34;修改完全后才会触发:\u0026#34;+e.target.value); }; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; reset和submit\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;submit和reset\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;服务器地址\u0026#34; id=\u0026#34;myForm\u0026#34; onsubmit=\u0026#34;submitHandle\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;resetBtn\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;submitBtn\u0026#34;\u0026gt;提交\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; // 1.点击重置按钮则会重置表单中输入框的数据 var resetBtn = document.getElementById(\u0026#34;resetBtn\u0026#34;); var myForm = document.getElementById(\u0026#34;myForm\u0026#34;); resetBtn.onclick = function() { myForm.reset();//触发在表单 } // 2.提交到服务器的事件 var submitBtn = document.getElementById(\u0026#34;submitBtn\u0026#34;); submitBtn.onclick = function submitHandle(){ console.log(\u0026#34;提交\u0026#34;); } // function submitHandle(){ // console.log(\u0026#34;提交\u0026#34;); // } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 事件代理（事件委托） 子元素事件交给父元素处理\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;事件代理\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul id=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;li\u0026gt;列表1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表3\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表4\u0026lt;/li\u0026gt; \u0026lt;p\u0026gt;p标签\u0026lt;/p\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; // 1.常规方法点击子元素触发父元素的事件,适用于子元素过多则不好处理 var list = document.getElementById(\u0026#34;list\u0026#34;);//父元素对象 // list.onclick = function() { // console.log(\u0026#34;点击了\u0026#34;); // }; // 2.添加监听获取是LI类型的内容 list.addEventListener(\u0026#34;click\u0026#34;, function(e){ //事件子元素是列表类型而触发的 if(event.target.tagName === \u0026#39;LI\u0026#39;){ console.log(\u0026#34;点击了LI标签\u0026#34;); console.log(event.target.innerHTML); } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 定时器 setTimeout() 1 2 3 4 5 6 7 8 // 1.延时执行函数setTimeout(fun,time ms) 两种写法 setTimeout(() =\u0026gt; { console.log(\u0026#34;2s后执行\u0026#34;); }, 2000); setTimeout(function () { console.log(\u0026#34;3s后执行\u0026#34;); }, 3000); 注意\n1 2 3 4 5 6 7 8 9 10 11 12 // 2.setTimeout()中的this指向的是全局环境，如 var name=\u0026#34;Kin\u0026#34;; var user={ name: \u0026#34;TSK\u0026#34;, getName:function () { setTimeout(function(){ //2s后输出的是Kin,而非TSK console.log(this.name); },2000); } } user.getName(); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 3.解决方法,设置一个变量that,让user内的局部变量this传递给定时器的that var name=\u0026#34;Kin\u0026#34;; var user={ name: \u0026#34;TSK\u0026#34;, getName:function () { var that = this; console.log(\u0026#34;getName()this指向局部变量——\u0026gt;\u0026#34;+this.name);//输出的是TSK setTimeout(function(){ //2s后输出的是Kin,而非TSK console.log(\u0026#34;定时器that指向局部变量——\u0026gt;\u0026#34;+that.name); },2000); } } user.getName(); 取消\n1 2 3 4 5 6 7 // 4.定时器对象可以取消 var timer = setTimeout(function(){ console.log(\u0026#34;取消2s后执行失败\u0026#34;); },2000); clearTimeout(timer); setInterval 重点在每隔一段时间执行一次\n1 2 3 4 5 6 7 8 9 \u0026lt;script\u0026gt; // 每间隔n秒打印一次 var i =0; setInterval(function() { i++ console.log(i); },1000) \u0026lt;/script\u0026gt; 防抖 滚动监听 1 2 3 4 5 6 // 1.设置滚动监听 window.onscroll = scrollHandle function scrollHandle(){ var scrollTop = document.documentElement.scrollTop console.log(\u0026#34;页面滚动了\u0026#34;+scrollTop); } 缺点：滚动频率太高了，需要优化\n短时间内同时大量触发同一函数，只执行一次\n这种称之为防抖\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;防抖\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; p{ width: 400px; height: 400px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;p标签1\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签2\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签3\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签4\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签5\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; // 1.设置滚动监听 // 缺点：滚动频率太高了，需要优化 // window.onscroll = scrollHandle // function scrollHandle(){ // var scrollTop = document.documentElement.scrollTop // console.log(\u0026#34;页面滚动了\u0026#34;+scrollTop); // } // 2.解决方案:防抖设计一个定时器(短时间内同时大量触发同一函数，只执行一次) function debounce(fn,delay){ var timer =null; return function(){ if (timer){ clearTimeout(timer); } timer = setTimeout(fn,delay); } } // 200ms内只要动力都只执行一次,没动肯定不执行 window.onscroll = debounce(scrollHandle,200) function scrollHandle(){ var scrollTop = document.documentElement.scrollTop console.log(\u0026#34;页面滚动了\u0026#34;+scrollTop); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 节流 防抖实践有个缺点，要是一直滚动则不会打印\n短时间内大量触发同一事件，函数在指定时间期限内不再工作，直到过了这段时间才重新生效\n适用于搜索框input事件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;节流\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; p{ width: 400px; height: 400px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;p标签1\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签2\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签3\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签4\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;p标签5\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; // 1.设置滚动监听 // 缺点：滚动频率太高了，需要优化 // window.onscroll = scrollHandle // function scrollHandle(){ // var scrollTop = document.documentElement.scrollTop // console.log(\u0026#34;页面滚动了\u0026#34;+scrollTop); // } // 2.解决方案:节流设计一个定时器(短时间内同时大量触发同一函数，按频率执行一次) // 适用于搜索框input事件 function throttle(fn,delay){ //初始化默认不执行 33-37 var valid = true; return function(){ if (!valid){ return false } //按照频率执行 valid = false; setTimeout(function(){ fn(); valid = true; },delay); } } // 按照频率2s内只要动了,都会打印 window.onscroll = throttle(scrollHandle,2000) function scrollHandle(){ var scrollTop = document.documentElement.scrollTop console.log(\u0026#34;页面滚动了\u0026#34;+scrollTop); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 命令行工具 cmd\npowershell\nVUE Vue api风格 选项式api vue2\n组合式api vue3\n","permalink":"https://TShiKun.github.io/posts/blog/web-vue3%E5%AD%A6%E4%B9%A0/","summary":"HTML5 vscode快捷键以及插件 ! +tab 默认补全 ctrl + / 注释 h1$6补全标题 安装open in browser插件，实时显示浏览器内容 alt+b，打开默认浏览器 标题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!--这是声明，文档类型的缩写，避免浏览器怪异模式--\u0026gt; \u0026lt;!-- html基本骨架 --\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;","title":"Blog"},{"content":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找\nscan总共有这几种命令：scan、sscan、hscan、zscan，分别用于迭代数据库中的：数据库中所有键、集合键、哈希键、有序集合键，命令具体结构如下：\n1 2 3 4 scan cursor [MATCH pattern] [COUNT count] [TYPE type] sscan key cursor [MATCH pattern] [COUNT count] hscan key cursor [MATCH pattern] [COUNT count] zscan key cursor [MATCH pattern] [COUNT count] 2. scan scan cursor [MATCH pattern] [COUNT count] [TYPE type]，cursor表示游标，指查询开始的位置，count默认为10，查询完后会返回下一个开始的游标，当返回0的时候表示所有键查询完了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 127.0.0.1:6379[2]\u0026gt; scan 0 1) \u0026#34;3\u0026#34; 2) 1) \u0026#34;mystring\u0026#34; 2) \u0026#34;myzadd\u0026#34; 3) \u0026#34;myhset\u0026#34; 4) \u0026#34;mylist\u0026#34; 5) \u0026#34;myset2\u0026#34; 6) \u0026#34;myset1\u0026#34; 7) \u0026#34;mystring1\u0026#34; 8) \u0026#34;mystring3\u0026#34; 9) \u0026#34;mystring4\u0026#34; 10) \u0026#34;myset\u0026#34; 127.0.0.1:6379[2]\u0026gt; scan 3 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;myzadd1\u0026#34; 2) \u0026#34;mystring2\u0026#34; 3) \u0026#34;mylist2\u0026#34; 4) \u0026#34;myhset1\u0026#34; 5) \u0026#34;mylist1\u0026#34; MATCH可以采用模糊匹配找出自己想要查找的键，这里的逻辑是先查出20个，再匹配，而不是先匹配再查询，这里加上count 20是因为默认查出的10个数中可能不能包含所有的相关项，所以把范围扩大到查20个，我这里测试的键总共有15个\n1 2 3 4 5 127.0.0.1:6379[2]\u0026gt; scan 0 match mylist* count 20 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; TYPE可以根据具体的结构类型来匹配该类型的键\n1 2 3 4 5 127.0.0.1:6379[2]\u0026gt; scan 0 count 20 type list 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; 3. sscan sscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是集合类型的key\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 127.0.0.1:6379[2]\u0026gt; sadd myset1 a b c d (integer) 4 127.0.0.1:6379[2]\u0026gt; smembers myset1 1) \u0026#34;d\u0026#34; 2) \u0026#34;a\u0026#34; 3) \u0026#34;c\u0026#34; 4) \u0026#34;b\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;d\u0026#34; 2) \u0026#34;c\u0026#34; 3) \u0026#34;b\u0026#34; 4) \u0026#34;a\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 match a 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;a\u0026#34; 4. hscan hscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是哈希类型的key\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 127.0.0.1:6379[2]\u0026gt; hset myhset1 kk1 vv1 kk2 vv2 kk3 vv3 (integer) 3 127.0.0.1:6379[2]\u0026gt; hgetall myhset1 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 127.0.0.1:6379[2]\u0026gt; hscan myhset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 5. zscan zscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是有序集合类型的key\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 127.0.0.1:6379[2]\u0026gt; zadd myzadd1 1 zz1 2 zz2 3 zz3 (integer) 3 127.0.0.1:6379[2]\u0026gt; zrange myzadd1 0 -1 withscores 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; 127.0.0.1:6379[2]\u0026gt; zscan myzadd1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; ","permalink":"https://TShiKun.github.io/posts/tech/tech1/","summary":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找 scan总共有这几种命令：sca","title":"Redis scan命令学习"},{"content":"","permalink":"https://TShiKun.github.io/posts/life/life/","summary":"","title":"Life"},{"content":"","permalink":"https://TShiKun.github.io/posts/read/read/","summary":"","title":"Read"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 \u0026lt;/div\u0026gt; ","permalink":"https://TShiKun.github.io/posts/tech/tech/","summary":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科","title":"Tech"}]